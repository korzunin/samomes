{"version":3,"sources":["webpack:///../../../src/components/VDataTable/VSimpleTable.ts","webpack:///./src/constants/hardness.js","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///../../../src/components/VSwitch/VSwitch.ts"],"names":["name","props","dense","fixedHeader","height","Number","String","computed","classes","this","$slots","themeClasses","methods","genWrapper","wrapper","$createElement","staticClass","style","render","h","class","KH","CO3","HCO3","GH","Mg","Ca","KH_RATIO","countKh","mass","volume","defaultMenuProps","offsetY","offsetOverflow","transition","VSelect","allowOverflow","type","default","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","data","lazySearch","selectedIndex","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","getText","internalSearch","allItems","value","text","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","watch","internalValue","isFocused","document","$refs","input","isMenuActive","val","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","genInput","VTextField","mergeData","attrs","autocomplete","domProps","genInputSlot","slot","genSelections","hasSlot","onClick","isAppendInner","e","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event","delimiters","returnObject","editingIndex","computedCounterValue","delimiter","d","genChipSelection","chip","dblclick","onChipInput","onEnterDown","getMenuIndex","selectionStart","toLocaleLowerCase","includes","setValue","updateEditing","updateCombobox","isUsingSlot","Boolean","$scopedSlots","updateTags","menuIndex","index","findIndex","itemToSelect","Object","onPaste","pastedItemText","findExistingIndex","directives","Touch","inset","loading","flat","role","validationState","hasError","hasColor","switchData","setTextColor","undefined","genDefaultSlot","genSwitch","switchAttrs","genRipple","left","right","onSwipeRight","genProgress","progress","color","size","width","indeterminate","onSwipeLeft","onChange","onKeydown"],"mappings":"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","file":"js/chunk-1738acb6.4636891a.js","sourcesContent":["import './VSimpleTable.sass'\n\nimport { convertToUnit } from '../../util/helpers'\nimport Themeable from '../../mixins/themeable'\nimport mixins from '../../util/mixins'\nimport { VNode } from 'vue'\n\nexport default mixins(Themeable).extend({\n  name: 'v-simple-table',\n\n  props: {\n    dense: Boolean,\n    fixedHeader: Boolean,\n    height: [Number, String],\n  },\n\n  computed: {\n    classes (): Record<string, boolean> {\n      return {\n        'v-data-table--dense': this.dense,\n        'v-data-table--fixed-height': !!this.height && !this.fixedHeader,\n        'v-data-table--fixed-header': this.fixedHeader,\n        'v-data-table--has-top': !!this.$slots.top,\n        'v-data-table--has-bottom': !!this.$slots.bottom,\n        ...this.themeClasses,\n      }\n    },\n  },\n\n  methods: {\n    genWrapper () {\n      return this.$slots.wrapper || this.$createElement('div', {\n        staticClass: 'v-data-table__wrapper',\n        style: {\n          height: convertToUnit(this.height),\n        },\n      }, [\n        this.$createElement('table', this.$slots.default),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-data-table',\n      class: this.classes,\n    }, [\n      this.$slots.top,\n      this.genWrapper(),\n      this.$slots.bottom,\n    ])\n  },\n})\n","/**\n * Samomes\n *\n * Copyright (C) 2021 Mikhail Lapshin\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport const KH = {\n  CO3: 60.01001,\n  HCO3: 61.01812,\n};\n\nexport const GH = {\n  Mg: 4.346,\n  Ca: 7.144,\n};\n\nconst KH_RATIO = 2.804;\n\nexport const countKh = (mass, volume) => mass / (volume * KH.HCO3) * (KH.HCO3 / KH.CO3) * KH_RATIO;\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      value[this.editingIndex] = this.internalSearch\n\n      this.setValue(value)\n\n      this.editingIndex = -1\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.findIndex(item =>\n        this.internalSearch === this.getText(item))\n\n      // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object'\n        ? Object.assign({}, this.selectedItems[index])\n        : this.internalSearch\n\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(itemToSelect)\n\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n","// Styles\nimport '../../styles/components/_selection-controls.sass'\nimport './VSwitch.sass'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\nimport VInput from '../VInput'\n\n// Directives\nimport Touch from '../../directives/touch'\n\n// Components\nimport { VFabTransition } from '../transitions'\nimport VProgressCircular from '../VProgressCircular/VProgressCircular'\n\n// Helpers\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeData } from 'vue'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-switch',\n\n  directives: { Touch },\n\n  props: {\n    inset: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n    flat: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls v-input--switch': true,\n        'v-input--switch--flat': this.flat,\n        'v-input--switch--inset': this.inset,\n      }\n    },\n    attrs (): object {\n      return {\n        'aria-checked': String(this.isActive),\n        'aria-disabled': String(this.isDisabled),\n        role: 'switch',\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n    switchData (): VNodeData {\n      return this.setTextColor(this.loading ? undefined : this.validationState, {\n        class: this.themeClasses,\n      })\n    },\n  },\n\n  methods: {\n    genDefaultSlot (): (VNode | null)[] {\n      return [\n        this.genSwitch(),\n        this.genLabel(),\n      ]\n    },\n    genSwitch (): VNode {\n      const { title, ...switchAttrs } = this.attrs$\n\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.genInput('checkbox', {\n          ...this.attrs,\n          ...switchAttrs,\n        }),\n        this.genRipple(this.setTextColor(this.validationState, {\n          directives: [{\n            name: 'touch',\n            value: {\n              left: this.onSwipeLeft,\n              right: this.onSwipeRight,\n            },\n          }],\n        })),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__track',\n          ...this.switchData,\n        }),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__thumb',\n          ...this.switchData,\n        }, [this.genProgress()]),\n      ])\n    },\n    genProgress (): VNode {\n      return this.$createElement(VFabTransition, {}, [\n        this.loading === false\n          ? null\n          : this.$slots.progress || this.$createElement(VProgressCircular, {\n            props: {\n              color: (this.loading === true || this.loading === '')\n                ? (this.color || 'primary')\n                : this.loading,\n              size: 16,\n              width: 2,\n              indeterminate: true,\n            },\n          }),\n      ])\n    },\n    onSwipeLeft () {\n      if (this.isActive) this.onChange()\n    },\n    onSwipeRight () {\n      if (!this.isActive) this.onChange()\n    },\n    onKeydown (e: KeyboardEvent) {\n      if (\n        (e.keyCode === keyCodes.left && this.isActive) ||\n        (e.keyCode === keyCodes.right && !this.isActive)\n      ) this.onChange()\n    },\n  },\n})\n"],"sourceRoot":""}